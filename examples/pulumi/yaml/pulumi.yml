name: pulum
description: A minimal Pulumi YAML program with the classic Azure provider
runtime: yaml
variables:
  workspaceSharedKeys:
    fn::invoke:
      function: azure-native:operationalinsights:getSharedKeys
      arguments:
        resourceGroupName: ${resourceGroup.name}
        workspaceName: ${workspace.name}
      return: primarySharedKey
  adminUsername:
    fn::invoke:
      function: azure-native:containerregistry:listRegistryCredentials
      arguments:
        resourceGroupName: ${resourceGroup.name}
        registryName: ${registry.name}
      return: username
  adminPasswords:
    fn::invoke:
      function: azure-native:containerregistry:listRegistryCredentials
      arguments:
        resourceGroupName: ${resourceGroup.name}
        registryName: ${registry.name}
      return: passwords
resources:
  # Create an Azure Resource Group
  resourceGroup:
    type: azure:core:ResourceGroup
    properties:
      name: rg
      location: westeurope
  workspace:
    type: azure-native:operationalinsights:Workspace
    properties:
      location: westeurope
      resourceGroupName: ${resourceGroup.name}
      retentionInDays: 30
      sku:
        name: PerGB2018
  managedEnvironment:
    type: azure-native:app:ManagedEnvironment
    properties:
      appLogsConfiguration:
        logAnalyticsConfiguration:
          customerId: ${workspace.customerId}
          sharedKey: ${workspaceSharedKeys}
      location: westeurope
      resourceGroupName: ${resourceGroup.name}
  registry:
    type: azure-native:containerregistry:Registry
    properties:
      resourceGroupName: ${resourceGroup.name}
      location: westeurope
      sku:
        name: "Basic"
      adminUserEnabled: true
  provider:
    type: pulumi:providers:docker
    properties:
      registryAuth:
        - address: ${registry.loginServer}
          username: ${adminUsername}
          password: ${adminPasswords[0].value}
  remixImage:
    type: docker:RegistryImage
    properties:
      name: ${registry.loginServer}/remix:v1
      build:
        context: ../frontend
    options:
      provider: ${provider}
  service1Image:
    type: docker:RegistryImage
    properties:
      name: ${registry.loginServer}/service1:v1
      build:
        context: ../services/service1
    options:
      provider: ${provider}
  service2Image:
    type: docker:RegistryImage
    properties:
      name: ${registry.loginServer}/service2:v1
      build:
        context: ../services/service1
    options:
      provider: ${provider}

  frontend:
    type: azure-native:app:ContainerApp
    properties:
      configuration:
        ingress:
          external: true
          targetPort: 8000
        dapr:
          appPort: 8000
          enabled: true
          appId: "remix"
        registries:
          - server: ${registry.loginServer}
            username: ${adminUsername}
            passwordSecretRef: "pwd"
        secrets:
          - name: "pwd"
            value: ${adminPasswords[0].value}
      location: westeurope
      managedEnvironmentId: ${managedEnvironment.id}
      resourceGroupName: ${resourceGroup.name}
      template:
        containers:
          - image: node-12
            name: remix

  service1:
    type: azure-native:app:ContainerApp
    properties:
      configuration:
        dapr:
          appPort: 3000
          enabled: true
          appId: service1
        registries:
          - server: ${registry.loginServer}
            username: ${adminUsername}
            passwordSecretRef: "pwd"
        secrets:
          - name: "pwd"
            value: ${adminPasswords[0].value}
      location: westeurope
      managedEnvironmentId: ${managedEnvironment.id}
      resourceGroupName: ${resourceGroup.name}
      template:
        containers:
          - image: ${service1Image.name}
            name: service1

  service2:
    type: azure-native:app:ContainerApp
    properties:
      configuration:
        ingress:
          external: true
          targetPort: 80
        dapr:
          appPort: 3001
          enabled: true
          appId: service2
        registries:
          - server: ${registry.loginServer}
            username: ${adminUsername}
            passwordSecretRef: "pwd"
        secrets:
          - name: "pwd"
            value: ${adminPasswords[0].value}
      location: westeurope
      managedEnvironmentId: ${managedEnvironment.id}
      resourceGroupName: ${resourceGroup.name}
      template:
        containers:
          - image: ${service2Image.name}
            name: service2
#outputs:
  #endpoint: https://${containerapp.configuration.ingress.fqdn}